// <auto-generated />
using System;
using DoctorWhoData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DoctorWhoData.Migrations
{
    [DbContext(typeof(DoctorWhoDBContext))]
    partial class DoctorWhoDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DoctorWhoDomain.Entities.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Name = "Author 1"
                        },
                        new
                        {
                            AuthorId = 2,
                            Name = "Author 2"
                        },
                        new
                        {
                            AuthorId = 3,
                            Name = "Author 3"
                        },
                        new
                        {
                            AuthorId = 4,
                            Name = "Author 4"
                        },
                        new
                        {
                            AuthorId = 5,
                            Name = "Author 5"
                        });
                });

            modelBuilder.Entity("DoctorWhoDomain.Entities.Companion", b =>
                {
                    b.Property<int>("CompanionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanionId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhoPlayed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanionId");

                    b.ToTable("Companions");

                    b.HasData(
                        new
                        {
                            CompanionId = 1,
                            Name = "Companion 1",
                            WhoPlayed = "Actor 1"
                        },
                        new
                        {
                            CompanionId = 2,
                            Name = "Companion 2",
                            WhoPlayed = "Actor 2"
                        },
                        new
                        {
                            CompanionId = 3,
                            Name = "Companion 3",
                            WhoPlayed = "Actor 3"
                        },
                        new
                        {
                            CompanionId = 4,
                            Name = "Companion 4",
                            WhoPlayed = "Actor 4"
                        },
                        new
                        {
                            CompanionId = 5,
                            Name = "Companion 5",
                            WhoPlayed = "Actor 5"
                        });
                });

            modelBuilder.Entity("DoctorWhoDomain.Entities.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FirstEpisodeDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastEpisodeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            DoctorId = 1,
                            BirthDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7307),
                            FirstEpisodeDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7370),
                            LastEpisodeDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7373),
                            Name = "Doctor Name 1",
                            Number = "Doctor 1"
                        },
                        new
                        {
                            DoctorId = 2,
                            BirthDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7377),
                            FirstEpisodeDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7380),
                            LastEpisodeDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7383),
                            Name = "Doctor Name 2",
                            Number = "Doctor 2"
                        },
                        new
                        {
                            DoctorId = 3,
                            BirthDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7387),
                            FirstEpisodeDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7389),
                            LastEpisodeDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7482),
                            Name = "Doctor Name 3",
                            Number = "Doctor 3"
                        },
                        new
                        {
                            DoctorId = 4,
                            BirthDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7489),
                            FirstEpisodeDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7492),
                            LastEpisodeDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7494),
                            Name = "Doctor Name 4",
                            Number = "Doctor 4"
                        },
                        new
                        {
                            DoctorId = 5,
                            BirthDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7498),
                            FirstEpisodeDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7501),
                            LastEpisodeDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7504),
                            Name = "Doctor Name 5",
                            Number = "Doctor 5"
                        });
                });

            modelBuilder.Entity("DoctorWhoDomain.Entities.Enemy", b =>
                {
                    b.Property<int>("EnemyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnemyId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnemyId");

                    b.ToTable("Enemies");

                    b.HasData(
                        new
                        {
                            EnemyId = 1,
                            Description = "Description 1",
                            Name = "Enemy 1"
                        },
                        new
                        {
                            EnemyId = 2,
                            Description = "Description 2",
                            Name = "Enemy 2"
                        },
                        new
                        {
                            EnemyId = 3,
                            Description = "Description 3",
                            Name = "Enemy 3"
                        },
                        new
                        {
                            EnemyId = 4,
                            Description = "Description 4",
                            Name = "Enemy 4"
                        },
                        new
                        {
                            EnemyId = 5,
                            Description = "Description 5",
                            Name = "Enemy 5"
                        });
                });

            modelBuilder.Entity("DoctorWhoDomain.Entities.Episode", b =>
                {
                    b.Property<int>("EpisodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EpisodeId"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EpisodeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("SeriesNumber")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EpisodeId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Episodes");

                    b.HasData(
                        new
                        {
                            EpisodeId = 1,
                            AuthorId = 1,
                            DoctorId = 1,
                            EpisodeDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7551),
                            Notes = "Note 1",
                            Number = 1,
                            SeriesNumber = 1,
                            Title = "Episode 1",
                            Type = "Type 1"
                        },
                        new
                        {
                            EpisodeId = 2,
                            AuthorId = 2,
                            DoctorId = 2,
                            EpisodeDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7558),
                            Notes = "Note 2",
                            Number = 2,
                            SeriesNumber = 1,
                            Title = "Episode 2",
                            Type = "Type 1"
                        },
                        new
                        {
                            EpisodeId = 3,
                            AuthorId = 3,
                            DoctorId = 3,
                            EpisodeDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7564),
                            Notes = "Note 3",
                            Number = 3,
                            SeriesNumber = 1,
                            Title = "Episode 3",
                            Type = "Type 1"
                        },
                        new
                        {
                            EpisodeId = 4,
                            AuthorId = 4,
                            DoctorId = 4,
                            EpisodeDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7569),
                            Notes = "Note 4",
                            Number = 4,
                            SeriesNumber = 1,
                            Title = "Episode 4",
                            Type = "Type 1"
                        },
                        new
                        {
                            EpisodeId = 5,
                            AuthorId = 5,
                            DoctorId = 5,
                            EpisodeDate = new DateTime(2023, 7, 6, 11, 41, 0, 226, DateTimeKind.Local).AddTicks(7574),
                            Notes = "Note 5",
                            Number = 5,
                            SeriesNumber = 1,
                            Title = "Episode 5",
                            Type = "Type 1"
                        });
                });

            modelBuilder.Entity("DoctorWhoDomain.Entities.EpisodeCompanion", b =>
                {
                    b.Property<int>("EpisodeCompanionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EpisodeCompanionId"));

                    b.Property<int>("CompanionId")
                        .HasColumnType("int");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.HasKey("EpisodeCompanionId");

                    b.HasIndex("CompanionId");

                    b.HasIndex("EpisodeId");

                    b.ToTable("EpisodeCompanions");

                    b.HasData(
                        new
                        {
                            EpisodeCompanionId = 1,
                            CompanionId = 1,
                            EpisodeId = 1
                        },
                        new
                        {
                            EpisodeCompanionId = 2,
                            CompanionId = 2,
                            EpisodeId = 2
                        },
                        new
                        {
                            EpisodeCompanionId = 3,
                            CompanionId = 3,
                            EpisodeId = 3
                        },
                        new
                        {
                            EpisodeCompanionId = 4,
                            CompanionId = 4,
                            EpisodeId = 4
                        },
                        new
                        {
                            EpisodeCompanionId = 5,
                            CompanionId = 5,
                            EpisodeId = 5
                        });
                });

            modelBuilder.Entity("DoctorWhoDomain.Entities.EpisodeEnemy", b =>
                {
                    b.Property<int>("EpisodeEnemyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EpisodeEnemyId"));

                    b.Property<int>("EnemyId")
                        .HasColumnType("int");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.HasKey("EpisodeEnemyId");

                    b.HasIndex("EnemyId");

                    b.HasIndex("EpisodeId");

                    b.ToTable("EpisodeEnemies");

                    b.HasData(
                        new
                        {
                            EpisodeEnemyId = 1,
                            EnemyId = 1,
                            EpisodeId = 1
                        },
                        new
                        {
                            EpisodeEnemyId = 2,
                            EnemyId = 2,
                            EpisodeId = 2
                        },
                        new
                        {
                            EpisodeEnemyId = 3,
                            EnemyId = 3,
                            EpisodeId = 3
                        },
                        new
                        {
                            EpisodeEnemyId = 4,
                            EnemyId = 4,
                            EpisodeId = 4
                        },
                        new
                        {
                            EpisodeEnemyId = 5,
                            EnemyId = 5,
                            EpisodeId = 5
                        });
                });

            modelBuilder.Entity("DoctorWhoDomain.Entities.ViewEpisode", b =>
                {
                    b.Property<string>("Authors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Doctors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Enemies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EpisodeId")
                        .HasColumnType("int");

                    b.HasIndex("EpisodeId");

                    b.ToTable((string)null);

                    b.ToView("ViewEpisodes", (string)null);
                });

            modelBuilder.Entity("DoctorWhoDomain.Entities.Episode", b =>
                {
                    b.HasOne("DoctorWhoDomain.Entities.Author", "Author")
                        .WithMany("Episodes")
                        .HasForeignKey("AuthorId");

                    b.HasOne("DoctorWhoDomain.Entities.Doctor", "Doctor")
                        .WithMany("Episodes")
                        .HasForeignKey("DoctorId");

                    b.Navigation("Author");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("DoctorWhoDomain.Entities.EpisodeCompanion", b =>
                {
                    b.HasOne("DoctorWhoDomain.Entities.Companion", null)
                        .WithMany()
                        .HasForeignKey("CompanionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorWhoDomain.Entities.Episode", null)
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorWhoDomain.Entities.EpisodeEnemy", b =>
                {
                    b.HasOne("DoctorWhoDomain.Entities.Enemy", null)
                        .WithMany()
                        .HasForeignKey("EnemyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DoctorWhoDomain.Entities.Episode", null)
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorWhoDomain.Entities.ViewEpisode", b =>
                {
                    b.HasOne("DoctorWhoDomain.Entities.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("DoctorWhoDomain.Entities.Author", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("DoctorWhoDomain.Entities.Doctor", b =>
                {
                    b.Navigation("Episodes");
                });
#pragma warning restore 612, 618
        }
    }
}
